from flask import Flask, request, jsonify
from PIL import Image
import imagehash
import base64
from io import BytesIO

base64_image = ""
base64_image2 = "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"

app = Flask(__name__)


@app.route('/api/compare-image', methods=['POST'])
def hash_image():
    try:
        # Get JSON payload
        data = request.json
        if not data or 'base64_image' not in data:
            return jsonify({"error": "Missing 'base64_image' in request"}), 400

        # Decode the base64 image
        base64_image2 = data['base64_image']

        # Decode the base64 string into bytes
        image_data = base64.b64decode(base64_image)
        image_data2 = base64.b64decode(base64_image2)

        # Create a BytesIO object from the bytes
        image_bytes = BytesIO(image_data)
        image_bytes2 = BytesIO(image_data2)
        image1 = Image.open(image_bytes)
        image2 = Image.open(image_bytes2)

        hash1 = imagehash.average_hash(image1)
        hash2 = imagehash.average_hash(image2)
        print(hash1 - hash2)

        return jsonify({"isEqual": hash1 - hash2 < 4}), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500